// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Flight {
  id           String   @id @default(cuid())
  flightNumber String   @unique
  iataCode     String
  icaoCode     String
  status       String   @default("scheduled") // scheduled, active, landed, cancelled
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  airlineId String
  airline   Airline @relation(fields: [airlineId], references: [id])

  departureId String
  departure   Airport @relation("DepartureFlights", fields: [departureId], references: [id])

  arrivalId String
  arrival   Airport @relation("ArrivalFlights", fields: [arrivalId], references: [id])

  aircraftId String?
  aircraft   Aircraft? @relation(fields: [aircraftId], references: [id])

  // Flight details
  departureTime     DateTime
  arrivalTime       DateTime
  departureDelay    Int      @default(0)
  arrivalDelay      Int      @default(0)
  departureTerminal String?
  arrivalTerminal   String?
  departureGate     String?
  arrivalGate       String?
  departureRunway   String?
  arrivalRunway     String?
  baggageClaim      String?

  // Live tracking data
  latitude     Float?
  longitude    Float?
  altitude     Float?
  speed        Float?
  heading      Float?
  verticalRate Float?
  onGround     Boolean   @default(false)
  lastUpdate   DateTime?

  // Risk assessment
  riskScore Int    @default(0)
  weather   String @default("Unknown")
  atcLoad   String @default("Unknown")

  // Relations
  riskAssessment RiskAssessment?

  @@index([flightNumber])
  @@index([date])
  @@index([status])
}

model Airline {
  id        String   @id @default(cuid())
  name      String
  iataCode  String   @unique
  icaoCode  String   @unique
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  flights Flight[]
  hubs    AirlineHub[]
  routes  FlightRoute[]
}

model AirlineHub {
  id        String   @id @default(cuid())
  airlineId String
  airline   Airline  @relation(fields: [airlineId], references: [id])
  airportId String
  airport   Airport  @relation(fields: [airportId], references: [id])
  createdAt DateTime @default(now())

  @@unique([airlineId, airportId])
}

model Airport {
  id        String   @id @default(cuid())
  name      String
  iataCode  String   @unique
  icaoCode  String   @unique
  city      String
  country   String
  timezone  String
  latitude  Float
  longitude Float
  altitude  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  departureFlights  Flight[]      @relation("DepartureFlights")
  arrivalFlights    Flight[]      @relation("ArrivalFlights")
  hubs              AirlineHub[]
  routeOrigins      FlightRoute[] @relation("RouteOrigin")
  routeDestinations FlightRoute[] @relation("RouteDestination")
}

model Aircraft {
  id            String   @id @default(cuid())
  registration  String   @unique
  iataCode      String
  icaoCode      String
  model         String
  manufacturer  String
  type          String // narrow-body, wide-body, regional
  maxPassengers Int
  maxRange      Int? // in nautical miles
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  flights Flight[]
}

model FlightRoute {
  id            String   @id @default(cuid())
  airlineId     String
  airline       Airline  @relation(fields: [airlineId], references: [id])
  originId      String
  origin        Airport  @relation("RouteOrigin", fields: [originId], references: [id])
  destinationId String
  destination   Airport  @relation("RouteDestination", fields: [destinationId], references: [id])
  distance      Int // in nautical miles
  duration      Float // in hours
  frequency     String   @default("daily") // daily, weekly, seasonal
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([airlineId, originId, destinationId])
}

model WeatherAlert {
  id          String   @id @default(cuid())
  type        String // turbulence, thunderstorm, icing, etc.
  severity    String // low, moderate, severe, extreme
  description String
  latitude    Float
  longitude   Float
  altitude    Int // in feet
  radius      Int // in nautical miles
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([startTime])
}

model RiskAssessment {
  id              String   @id @default(cuid())
  flightId        String   @unique
  flight          Flight   @relation(fields: [flightId], references: [id])
  overallRisk     Int // 0-100
  weatherRisk     Int // 0-100
  aircraftRisk    Int // 0-100
  routeRisk       Int // 0-100
  crewRisk        Int // 0-100
  factors         String // JSON string of risk factors
  recommendations String? // JSON string of recommendations
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
